<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Standards on My New Hugo Site</title>
    <link>https://nexmo.github.io/api-standards/standard/</link>
    <description>Recent content in Standards on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 31 Jul 2018 02:53:21 +0100</lastBuildDate>
    
	<atom:link href="https://nexmo.github.io/api-standards/standard/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Data Structure</title>
      <link>https://nexmo.github.io/api-standards/standard/data-structure/</link>
      <pubDate>Tue, 31 Jul 2018 02:53:21 +0100</pubDate>
      
      <guid>https://nexmo.github.io/api-standards/standard/data-structure/</guid>
      <description>We aim to use consistent terminology across all APIs. Here are the commonly used property names:
 [resource]_id - A string that identifies a specific resource to - The identifier of a message or conversation recipient. This represents either the app sending an outbound message or the user contacting the app with an inbound messages from - The identifier of a message sender or the initiator of a conversation. This represents either the app sending an outbound message or the user contacting the app with an inbound messages reference - The reference associating this request with the customer&amp;rsquo;s internal data systems.</description>
    </item>
    
    <item>
      <title>API Versioning</title>
      <link>https://nexmo.github.io/api-standards/standard/versioning/</link>
      <pubDate>Tue, 31 Jul 2018 01:17:16 +0100</pubDate>
      
      <guid>https://nexmo.github.io/api-standards/standard/versioning/</guid>
      <description>All Nexmo APIs must support versioning.
Structure The version is given in the URI. The format for versioning is HOST/VERSION/API.
The only time we update an API&amp;rsquo;s version is when a backwards compatibility break is made. Due to this, Nexmo APIs only support major API versions e.g. /v1, /v2
Beta programs may use either a /beta version or use /v0.1, /v0.2 etc if breaking changes need to be communicated to consumers.</description>
    </item>
    
    <item>
      <title>Deprecation</title>
      <link>https://nexmo.github.io/api-standards/standard/deprecation/</link>
      <pubDate>Tue, 31 Jul 2018 01:17:16 +0100</pubDate>
      
      <guid>https://nexmo.github.io/api-standards/standard/deprecation/</guid>
      <description>When the decision has been taken to deprecate an API:
 For beta products the deprecation period must be at least 30 days (60 days recommended) For GA products the deprecation period must be at least 1 year Warning emails will be sent to the API at regular intervals before the deprecation time A guide will be supplied to customers explaining how to migrate to the replacement API with the initial deprecation notice.</description>
    </item>
    
    <item>
      <title>Pagination</title>
      <link>https://nexmo.github.io/api-standards/standard/pagination/</link>
      <pubDate>Tue, 31 Jul 2018 01:17:04 +0100</pubDate>
      
      <guid>https://nexmo.github.io/api-standards/standard/pagination/</guid>
      <description>APIs at Nexmo shall use one of the following pagination schemes:
 Cursor based for ever-expanding data sets, or where it&amp;rsquo;s infeasible to count the total number of records e.g. Voice API call log. Cursor based pagination is also used when data is programatically added to a data set e.g. call recordings to the Media API Page based for small, managed APIs where the customer is in control of what is in the data set e.</description>
    </item>
    
    <item>
      <title>HTTP Verbs</title>
      <link>https://nexmo.github.io/api-standards/standard/http-verbs/</link>
      <pubDate>Tue, 31 Jul 2018 01:16:58 +0100</pubDate>
      
      <guid>https://nexmo.github.io/api-standards/standard/http-verbs/</guid>
      <description>Use HTTP methods to map CRUD actions on Resources i.e.  POST creates a new Resources in a Collection DELETE removes a Resource GET lists Resources PUT replaces a complete Resource PATCH partially updates a Resource   Examples  GET members/ - lists all the resources of the collection members GET members/bob - lists the details of bob who is a resources of the collection members POST members -d &#39;{&amp;quot;name&amp;quot;: &amp;quot;Harry&amp;quot;, &amp;quot;age&amp;quot;: 22, &amp;quot;phone_number&amp;quot;: &amp;quot;14155550100&amp;quot;}&#39; - create a new member called Harry PUT members/harry -d &#39;{&amp;quot;name&amp;quot;: &amp;quot;Harry&amp;quot;, &amp;quot;age&amp;quot;: 23, &amp;quot;phone_number&amp;quot;: &amp;quot;14155550100&amp;quot;}&#39; - replace all of Harry&amp;rsquo;s details PATCH members/harry -d &#39;{&amp;quot;age&amp;quot;: 23}&#39; - update Harry&amp;rsquo;s age only DELETE members/steve - remove the member Steve from the collection  Why did we choose this?</description>
    </item>
    
    <item>
      <title>Resource Names</title>
      <link>https://nexmo.github.io/api-standards/standard/resource-names/</link>
      <pubDate>Tue, 31 Jul 2018 01:16:47 +0100</pubDate>
      
      <guid>https://nexmo.github.io/api-standards/standard/resource-names/</guid>
      <description>All new API&amp;rsquo;s shall adhere to the principles of REST. In doing so the following shall apply:
 Separate things into logical Collections e.g. members Collections are the collective term for Resources e.g. member Resources are nouns not verbs Collections are plurals  Examples  /members - members is the collection name /members/bob - Bob is the resource, he&amp;rsquo;s a member  Why did we choose this? Pre-existing standard, based on Roy Fielding&amp;rsquo;s dissertation</description>
    </item>
    
    <item>
      <title>HAL-JSON</title>
      <link>https://nexmo.github.io/api-standards/standard/hal-json/</link>
      <pubDate>Tue, 31 Jul 2018 01:16:31 +0100</pubDate>
      
      <guid>https://nexmo.github.io/api-standards/standard/hal-json/</guid>
      <description>This is a short description of the standard
 HAL-JSON provides a consistent format supported by consumer and provider tooling. Allows resources to be embedded using an _embedded property (with a distinguishing key). Collections are resources that embed a set of resources of the same type. Collections are not limited to a fixed set of properties (can create collection specific properties like &amp;lsquo;queued_calls&amp;rsquo; to provide a count of a subset).</description>
    </item>
    
    <item>
      <title>Errors</title>
      <link>https://nexmo.github.io/api-standards/standard/errors/</link>
      <pubDate>Tue, 31 Jul 2018 01:16:19 +0100</pubDate>
      
      <guid>https://nexmo.github.io/api-standards/standard/errors/</guid>
      <description>Any non 200 response body should follow a standard format. This should be consistent for all products, as an error may be product specific (invalid parameters) or global in nature (invalid authorization). The HTTP Problem draft, specifically the JSON Object provide a familiar format used by other APIs that provides a set of standard properties while allowing additional properties when needed for a particular error condition.
Examples In the following examples:</description>
    </item>
    
    <item>
      <title>Decimal Precision</title>
      <link>https://nexmo.github.io/api-standards/standard/decimal-precision/</link>
      <pubDate>Tue, 31 Jul 2018 01:15:43 +0100</pubDate>
      
      <guid>https://nexmo.github.io/api-standards/standard/decimal-precision/</guid>
      <description>All values returned by Nexmo shall have the same decimal precision. Suggested is 4 decimal point to match pricing.
Examples { &amp;quot;credit_limit&amp;quot;: &amp;quot;0.0000&amp;quot; }  Why did we choose this? Pre-existing standard
Related Links N/A</description>
    </item>
    
    <item>
      <title>Webhooks</title>
      <link>https://nexmo.github.io/api-standards/standard/webhooks/</link>
      <pubDate>Tue, 31 Jul 2018 01:15:27 +0100</pubDate>
      
      <guid>https://nexmo.github.io/api-standards/standard/webhooks/</guid>
      <description>GET webhooks Objects retrieved via webhooks by the API are in camelCase.
Examples Nexmo Call Control Objects (NCCO) examples:
 eventUrl musicOnHold beepOnStart  POST webhooks Objects sent via webhooks by the API are in snake_case.
Examples Voice API callbacks
 conversation_uuid start_time  Why did we choose this? Pre-existing standard
Related Links N/A</description>
    </item>
    
    <item>
      <title>Property Names</title>
      <link>https://nexmo.github.io/api-standards/standard/property-names/</link>
      <pubDate>Tue, 31 Jul 2018 01:15:07 +0100</pubDate>
      
      <guid>https://nexmo.github.io/api-standards/standard/property-names/</guid>
      <description>Have parameters / properties in lower case with underscores. Have identifiers following the format: type_id. (message_id, recording_id, etc) Use distinguishers only when the name is non-intuitive or conflicts with another name. (count instead of message_count because message should be intuitive, but carrier_network if there&amp;rsquo;s also a roaming network) Limit parameter / property names to a single underscore. Reuse parameter / property names. (from instead of msisdn)  Examples  machine_detection call_id conference_id  Why did we choose this?</description>
    </item>
    
  </channel>
</rss>